{"version":3,"sources":["pages/Formulario/index.js","pages/Main/index.js","pages/Page1/index.js","pages/Page2/index.js","pages/Navbar/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","props","refreshParent","setState","state","valor","class","this","React","Component","Table","remove","e","console","dir","lista","splice","edit","target","alunos","map","aluno","index","nome","nota","className","onClick","Form","submit","push","ponto","log","preventDefault","changeName","value","changeScore","onSubmit","type","onChange","Main","Page1","Page2","NavBar","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","Routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50bb6479.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Formulario extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {valor: true}\r\n  }\r\n   refreshParent = () => {\r\n     this.setState({})\r\n   }\r\n   render(){\r\n     return (\r\n       <div class=\"row my-4\">\r\n         <Form refreshParent={this.refreshParent}/>\r\n         <Table/>\r\n       </div>\r\n     ) \r\n   }\r\n }\r\n \r\n class Table extends React.Component{\r\n   remove = (e) => {\r\n     console.dir(e)\r\n     lista.splice(e, 1)\r\n     this.setState({})\r\n   }\r\n   edit = (e) => {\r\n     console.dir(e.target)\r\n   }\r\n   \r\n  alunos = () => {\r\n   return ( lista.map((aluno, index) => (\r\n     <tr><td>{aluno.nome}</td><td>{aluno.nota}</td><td>{aluno.nota>=5 ? 'Aprovado' : 'Reprovado'} </td><td><button className=\"btn btn-danger\" onClick={() => this.remove(index)}>Remover</button></td>\r\n     </tr>\r\n   ))\r\n )\r\n  } \r\n render(){\r\n   return <table className=\"table col-4\"><th>Nome</th><th>Pontos</th><th>Resultado</th>     {this.alunos()}</table> \r\n }\r\n   \r\n }\r\n \r\n class Form extends React.Component{\r\n   constructor(props){\r\n     super(props)\r\n     this.state = {nome: '', ponto: ''}\r\n   }\r\n   \r\n   submit = (e) => {\r\n     lista.push({nome: this.state.nome, nota: this.state.ponto})\r\n     console.log(lista)\r\n     this.props.refreshParent()\r\n     \r\n     e.preventDefault()\r\n   } \r\n   changeName = (e) => {\r\n     this.setState({nome: e.target.value})\r\n   }\r\n   changeScore = (e) => {\r\n     console.log(e.target.value)\r\n     this.setState({ponto: e.target.value})\r\n   }\r\n   \r\n   render(){\r\n     return (\r\n      \r\n       <form onSubmit={this.submit} className=\"col-2\">\r\n         \r\n      <div>\r\n         <div className=\"\">\r\n         <label>Nome</label> \r\n         <input type=\"text\" class=\"form-control\" value={this.state.nome} onChange={this.changeName} />\r\n         </div>\r\n         <div className=\"\">\r\n         <label>Pontuação</label> \r\n         <input type=\"number\"  class=\"form-control\" value={this.state.ponto} onChange={this.changeScore}/>\r\n         <input class=\"btn btn-primary my-2\" type=\"submit\" value=\"enviar\"/>\r\n         </div>\r\n         \r\n      </div>   \r\n       </form>\r\n     \r\n   )\r\n   }\r\n }\r\n \r\n const lista = [{nome: 'Wesley', nota: 10}, {nome: 'Wesley', nota: 8}, {nome: 'teste', nota: 4},]\r\n\r\n export default Formulario;","import React from 'react';\r\nimport Formulario from '../Formulario'\r\nfunction Main(){\r\n    return(\r\n        <div>\r\n            <Formulario />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\n\r\nfunction Page1(){\r\n    return(\r\n        <div>\r\n            <button>okok</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page1;\r\n","import React from 'react'\r\n\r\nfunction Page2(){\r\n    return(\r\n        <div>\r\n            <h1>Page2</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page2;","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nconst NavBar = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/crud-react-js\">Home</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/page1\">Page 1</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/page2\">Page 2</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport Main from './pages/Main';\r\nimport Page1 from './pages/Page1';\r\nimport Page2 from './pages/Page2'\r\nimport NavBar from  './pages/Navbar'\r\n\r\nfunction Routes(){\r\n    return(\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/crud-react-js\" exact component={Main} />\r\n                <Route path=\"/page1\" component={Page1} />\r\n                <Route path=\"/page2\" component={Page2}/>\r\n                <Route path=\"/navbar\" component={NavBar}/>\r\n            </Switch>        \r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default Routes;","import React from 'react';\nimport Routes from './routes';\nimport NavBar from './pages/Navbar'\nfunction App() {\n  return (\n    <div>\n    <NavBar />\n    <div className=\"container-fluid\">\n      <Routes />\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}